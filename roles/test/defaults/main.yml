airsonic_traefik_labels_list_of_dicts:
  - key: "traefik.enable"
    value: "{{ airsonic_available_externally | string }}"
  - key: "{{ 'traefik.http.services.' + airsonic_container_name + '.loadbalancer.server.port' }}"
    value: "8337"

airsonic_traefik_labels_list: |
  {{
    [("traefik.enable", airsonic_available_externally | string)]
    +
    [('traefik.http.services.' + airsonic_container_name + '.loadbalancer.server.port', "8337")]
    +
    ([('traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.ipstrategy.depth', "1")] if ansible_nas_use_tls else [])
    +
    ([('traefik.http.routers.' + airsonic_container_name + '.middlewares', "airsonic-whitelist")] if ansible_nas_use_tls else [("traefik.enable", airsonic_available_externally | string)])
  }}

airsonic_traefik_labels_string: |-
  {{
    'http://matrix-nginx-proxy:12080' if ansible_nas_use_tls else {
      'synapse': ('http://matrix-synapse-reverse-proxy-companion:8008' if ansible_nas_use_tls else 'http://matrix-synapse:'+ 'matrix_synapse_container_client_api_port'),
      'dendrite': ('http://matrix-dendrite:' + 'matrix_dendrite_http_bind_port'),
      'conduit': ('http://matrix-conduit:' + 'matrix_conduit_port_number'),
    }['synapse']
  }}

airsonic_traefik_labels_dict: >
  {%- set labels = {
    "traefik.enable": airsonic_available_externally | string,
    'traefik.http.services.' + airsonic_container_name + '.loadbalancer.server.port': "8337",
    'traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.ipstrategy.depth': "1",
    'traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.sourcerange': "127.0.0.1/32, 192.168.0.0/16",
    'traefik.http.routers.' + airsonic_container_name + '.middlewares': "airsonic-whitelist",
    'traefik.http.routers.' + airsonic_container_name + '.rule': 'Host(`airsonic.'+ ansible_nas_domain + '`)',
  } -%}
  {%- if ansible_nas_use_tls -%}
    {%- set _ = labels.update({'traefik.http.routers.' + airsonic_container_name + '.tls.certresolver': "letsencrypt"} ) -%}
    {%- set _ = labels.update({'traefik.http.routers.' + airsonic_container_name + '.tls.domains[0].main': ansible_nas_domain} ) -%}
    {%- set _ = labels.update({'traefik.http.routers.' + airsonic_container_name + '.tls.domains[0].sans': '*.' + ansible_nas_domain} ) -%}
  {%- endif -%}
  {{ labels }}

airsonic_traefik_labels_dict2: |-
  {%- set base = [
    ("traefik.enable", airsonic_available_externally | string),
    ('traefik.http.services.' + airsonic_container_name + '.loadbalancer.server.port', "8337"),
    ('traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.ipstrategy.depth', "1"),
    ('traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.sourcerange', "127.0.0.1/32, 192.168.0.0/16"),
    ('traefik.http.routers.' + airsonic_container_name + '.middlewares', "airsonic-whitelist"),
    ('traefik.http.routers.' + airsonic_container_name + '.rule', 'Host(`airsonic.'+ ansible_nas_domain + '`)'),
  ] -%}
  {%- if ansible_nas_use_tls -%}
    {% set base = base + [
      ('traefik.http.routers.' + airsonic_container_name + '.tls.certresolver', "letsencrypt"),
      ('traefik.http.routers.' + airsonic_container_name + '.tls.domains[0].main', ansible_nas_domain),
      ('traefik.http.routers.' + airsonic_container_name + '.tls.domains[0].sans', '*.' + ansible_nas_domain)
    ] -%}
  {%- endif -%}
  {%- set labels = dict.from_keys(base) -%}
  { {%- for key, value in labels | dictsort -%}
    '{{ key|e }}': '{{ value|e }}',
  {% endfor -%} }

airsonic_traefik_labels_dict3:
  traefik.enable: "{{ airsonic_available_externally | string }}"
  traefik.http.routers."{{ airsonic_hostname }}".rule: "Host(`{{ airsonic_hostname }}.{{ ansible_nas_domain }}`)"
  traefik.http.routers.{{ airsonic_hostname }}.tls.certresolver: "letsencrypt"
  traefik.http.routers.{{ airsonic_hostname }}.tls.domains[0].main: "{{ ansible_nas_domain }}"
  traefik.http.routers.{{ airsonic_hostname }}.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
  traefik.http.services.{{ airsonic_hostname }}.loadbalancer.server.port: "8181"

airsonic_traefik: |
  {{
    {
      'traefik.enable': airsonic_available_externally | string,
      'traefik.http.services.' + airsonic_container_name + '.loadbalancer.server.port': "8337",
      'traefik.http.routers.' + airsonic_container_name + '.tls.certresolver': "letsencrypt",
      'traefik.http.routers.' + airsonic_container_name + '.tls.domains[0].main': ansible_nas_domain,
      'traefik.http.routers.' + airsonic_container_name + '.tls.domains[0].sans': '*.' + ansible_nas_domain,
      'traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.ipstrategy.depth': "1",
      'traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.sourcerange': "127.0.0.1/32, 192.168.0.0/16",
      'traefik.http.routers.' + airsonic_container_name + '.middlewares': "airsonic-whitelist",
      'traefik.http.routers.' + airsonic_container_name + '.rule': 'Host(`airsonic.' + ansible_nas_domain + '`)',
    } if ansible_nas_use_tls else {
      'traefik.enable': airsonic_available_externally | string,
      'traefik.http.services.' + airsonic_container_name + '.loadbalancer.server.port': "8337",
      'traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.ipstrategy.depth': "1",
      'traefik.http.middlewares.' + airsonic_container_name + '-whitelist.ipwhitelist.sourcerange': "127.0.0.1/32, 192.168.0.0/16",
      'traefik.http.routers.' + airsonic_container_name + '.middlewares': "airsonic-whitelist",
      'traefik.http.routers.' + airsonic_container_name + '.rule': 'Host(`airsonic.'+ ansible_nas_domain + '`)',
    }
  }}

optional_labels:
  traefik.optional: "{{ airsonic_available_externally | string }}"
  traefik.optional.routers.test.rule: "Host(`{{ airsonic_hostname }}.{{ ansible_nas_domain }}`)"
  traefik.optional.routers.test.tls.certresolver: "letsencrypt"


role_available_externally: "{{ airsonic_available_externally }}"
role_hostname: "{{ airsonic_hostname }}"
role_port: "{{ airsonic_port }}"



airsonic_enabled: false
airsonic_available_externally: false

# directories
airsonic_config_directory: "{{ docker_home }}/test/config"

# uid / gid
airsonic_user_id: "0"
airsonic_group_id: "0"

# network
airsonic_hostname: "airsonic"
airsonic_port: "4040"

# specs
airsonic_memory: "1g"