##                       ._____.   .__
##  _____    ____   _____|__\_ |__ |  |   ____             ____ _____    ______
##  \__  \  /    \ /  ___/  || __ \|  | _/ __ \   ______  /    \\__  \  /  ___/
##   / __ \|   |  \\___ \|  || \_\ \  |_\  ___/  /_____/ |   |  \/ __ \_\___ \
##  (____  /___|  /____  >__||___  /____/\___  >         |___|  (____  /____  >
##       \/     \/     \/        \/          \/               \/     \/     \/
##     a n s i b l e - n a s      https://github.com/davestephens/ansible-nas

###
### DO NOT EDIT THIS FILE!
### Add your customisations to inventories/<your_inventory>/group_vars/nas.yml
###

###
### Anarion-NAS Applications
###

# Downloading
transmission_with_openvpn_enabled: false # Please see docs about how to set VPN credentials
transmission_enabled: false
nzbget_enabled: false
sabnzbd_enabled: false
nzbhydra2_enabled: false
pyload_enabled: false
utorrent_enabled: false

# Media Serving
plex_enabled: false
tautulli_enabled: false
booksonic_enabled: false
booksonicair_enabled: false
plex_autoscan_enabled: false
plex_meta_enabled: false
moviematch_enabled: false

# Media Sourcing
sonarr_enabled: false         # tv
sickchill_enabled: false
couchpotato_enabled: false
radarr_enabled: false
get_iplayer_enabled: false
jackett_enabled: false
minidlna_enabled: false
jellyfin_enabled: false
emby_enabled: false
bazarr_enabled: false
ombi_enabled: false
lidarr_enabled: false
youtubedlmaterial_enabled: false
mylar_enabled: false
lazylibrarian_enabled: false

# Music
airsonic_enabled: false
mymediaforalexa_enabled: false
beets_enabled: false

# News
miniflux_enabled: false
ttrss_enabled: false

# System Management
heimdall_enabled: false
organizr_enabled: false
portainer_enabled: false
glances_enabled: false
stats_enabled: false
loki_enabled: false
guacamole_enabled: false
netdata_enabled: false
watchtower_enabled: false
cloudflare_ddns_enabled: false
cloudcmd_enabled: false
virtual_desktop_enabled: false
krusader_enabled: false

# Backup & Restore
duplicati_enabled: false
nextcloud_enabled: false
timemachine_enabled: false
syncthing_enabled: false

# Software build and CI
gitea_enabled: false
gitlab_enabled: false

# IRC
znc_enabled: false
thelounge_enabled: false

# Password Management
vaultwarden_enabled: false
keycloak_enabled: false

# Finance
firefly_enabled: false

# Wallabag
wallabag_enabled: false

# Home Automation
homeassistant_enabled: false
mosquitto_enabled: false
homebridge_enabled: false
openhab_enabled: false

# Books
calibre_enabled: false

# Ubooquity
ubooquity_enabled: false

# Komga
komga_enabled: false

# Komga
kavita_enabled: false

# Joomla
joomla_enabled: false

# PyTivo
pytivo_enabled: false

# SEO
serposcope_enabled: false

# phpMyAdmin
phpmyadmin_enabled: false

# OpenLDAP
openldap_enabled: false

# Rclone
rclone_enabled: false
cloud_upload_enabled: false
rclone_remote_to_mount: gscrypt_sa
rclone_mount: /mnt/GD
rclone_impersonate_user: me@example.com
rclone_service_user: anarion-nas
rclone_service_group: anarion-nas
rclone_config_location: /home/{{ rclone_service_user }}/.config/rclone/rclone.conf
local_mount: /mnt/local
mergerfs_mount: /mnt/gmedia

rclone_configs:
  - name: gdrive
    properties:
      type: drive
      client_id: <CLIENT_ID>
      client_secret: <CLIENT_SECRET>
      token: '{"access_token":"<ACCESS_TOKEN>","token_type":"Bearer","refresh_token":"<REFRESH_TOKEN>","expiry":"<DATETIME>"}'
      root_folder_id: <ROOT_FOLDER_ID>
  - name: crypt
    properties:
      type: crypt
      remote: gdrive:media
      filename_encryption: standard
      password: <PASSWORD>
      password2: <PASSWORD2>
  - name: gsuite
    properties:
      type: drive
      client_id: <CLIENT_ID>
      client_secret: <CLIENT_SECRET>
      scope: drive
      token: '{"access_token":"<ACCESS_TOKEN>","token_type":"Bearer","refresh_token":"<REFRESH_TOKEN>","expiry":"<DATETIME>"}'
      root_folder_id: <ROOT_FOLDER_ID>
  - name: gscrypt
    properties:
      type: crypt
      remote: gsuite:media
      filename_encryption: standard
      password: <PASSWORD>
      password2: <PASSWORD2>
  - name: gsuite_sa
    properties:
      type: drive
      scope: drive
      service_account_file: <SA_JSON_FILE>
      root_folder_id: <ROOT_FOLDER_ID>
  - name: gscrypt_sa
    properties:
      type: crypt
      remote: gsuite_sa:media
      filename_encryption: standard
      directory_name_encryption: true
      password: <PASSWORD>
      password2: <PASSWORD2>

# MergerFS
mergerfs_enabled: false

# Restic
restic_enabled: false

# Grocy
grocy_enabled: false

# Barcode Buddy
barcodebuddy_enabled: false

# Snipe-it
snipeit_enabled: false

# Shaarli
shaarli_enabled: false

# Snipe-it
nodered_enabled: false

# netbox
netbox_enabled: false

# Seafile
seafile_enabled: false

# error-pages
errorpages_enabled: false

# flarum
flarum_enabled: false

# speedtest
speedtest_enabled: false

# webtrees
webtrees_enabled: false

# photoprism
photoprism_enabled: false

# photostructure
photostructure_enabled: false

# librephotos
librephotos_enabled: false

# whoogle
whoogle_enabled: false

# ghost
ghost_enabled: false

# graylog
graylog_enabled: false

# minetest
minetest_enabled: false

# claper
claper_enabled: false

# ssh login notification
ssh_login_notification_enabled: false

# photofield
photofield_enabled: false

# External Access
# Traefik will allow access to certain applications externally. To enable this you'll either; a domain name that points to your
# home static IP address, the cloudflare with the cloudflare_ddns dynamic DNS container enabled, or use a dynamic DNS provider like no-ip.
# You'll also need to map ports 80 and 443 from your router to your anarion-nas server, then enable the per-app "available_externally"
# settings.
traefik_enabled: false
traefik_port_http: "80"
traefik_port_https: "443"
traefik_port_ui: "8083"
traefik_watchtower_enable: "true"

# traefik-forward-auth
traefik_oidc_issuer_url: "https://keycloak.{{ ansible_nas_domain }}/auth/realms/homelab"
traefik_oidc_client_id: "my-traefik-forward-auth"
traefik_oidc_client_secret: "secret"
traefik_oidc_resource: ""
traefik_auth_host: "auth.{{ ansible_nas_domain }}"
traefik_cookie_domain: "{{ ansible_nas_domain }}"
traefik_insecure_cookie: "false"
traefik_domain: ""
traefik_url_path: "/_oauth"
traefik_secret: "secret"
traefik_whitelist: ""
traefik_froward_auth_port: "4181"
traefik_forward_auth_watchtower_enable: "true"

authelia_enabled: false

# codex
codex_enabled: false

# releaesbell
releasebell_enabled: false

# trilium
trilium_enabled: false

# immich
immich_enabled: false

# wger
wger_enabled: false

# memos
memos_enabled: false

# libreddit
libreddit_enabled: false

###
### General
###
# Sets the hostname of your Ansible NAS
ansible_nas_hostname: anarion-nas

# Sets the SAMBA workgroup of your Ansible NAS
ansible_nas_workgroup: workgroup

# Sets the timezone for your Ansible NAS
# You can find a list here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
ansible_nas_timezone: Europe/Warsaw

# Update all apt packages when playbook is run
keep_packages_updated: false

# Will be added to the docker group to give user command line access to docker
ansible_nas_user: anarion

# Your email and domain, used for Let's Encrypt SSL certs
ansible_nas_email: anarion@go2.pl

# Applications will have subdomain SSL certificates created if Traefik is enabled, e.g. anarion-nas.<your-domain>, nextcloud.<your-domain>
ansible_nas_domain: nas.anarion.pl

###
### Docker
###
# Where you want Docker to store images
docker_image_directory: "{{ docker_home }}/data"

# Where you want Docker to store its container data.
docker_home: /mnt/Volume2/docker

# Docker storage driver, see https://docs.docker.com/storage/storagedriver/select-storage-driver/#supported-backing-filesystems
# You might want to change this to ZFS, depending on your underlying filesystem.
docker_storage_driver: overlay2

###
### Samba
###
# The location where all shares will be created by default. Can be overridden on a per-share basis.
# This path will be mounted to backup containers, Duplicati
samba_shares_root: "{{ mergerfs_mount }}"

# Where stuff downloaded will be stored
downloads_root: /mnt/Volume3/download

# Where your movies are stored
movies_root: "{{ samba_shares_root }}/movies"

# Where your anime movies are stored
anime_movies_root: "{{ samba_shares_root }}/Anime/anime_movies"

# Where your TV episodes are stored
tv_root: "{{ samba_shares_root }}/series"

# Where your anime series are stored
anime_series_root: "{{ samba_shares_root }}/Anime/anime_series"

# Where torrent files are stored (picked up by Transmission for downloading)
torrents_root: "{{ downloads_root }}/torrentwatch"

# Where music is stored
music_root: "{{ samba_shares_root }}/Music"

# Where podcasts are stored
podcasts_root: "{{ samba_shares_root }}/Podcasts"

# Where your books are stored
books_root: "{{ samba_shares_root }}/books"

# Where your books are stored
audiobooks_root: "{{ samba_shares_root }}/Audiobooks"

# Where your books are stored
#othermedia_root: "{{ samba_shares_root }}/othermedia"

# Where your comics are stored
comics_root: "{{ samba_shares_root }}/comics"

# Where photos are stored
photos_root: "{{ samba_shares_root }}/Pics"

# Where anime are stored
anime_root: "{{ samba_shares_root }}/Anime"

# The description that'll appear next to your Anarion-NAS box when browsing your network
samba_server_string: Anarion NAS

# Shares you want published over Samba.
samba_shares:
  - name: downloads
    comment: 'Stuff downloaded'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ downloads_root }}"

  - name: movies
    comment: 'Movies'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ movies_root }}"

  - name: tv
    comment: 'TV Episodes'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ tv_root }}"

  - name: music
    comment: 'Music'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ music_root }}"

  # - name: podcasts
  #   comment: 'Podcasts'
  #   guest_ok: yes
  #   public: yes
  #   writable: yes
  #   browsable: yes
  #   path: "{{ podcasts_root }}"

  # - name: dump
  #   comment: 'File dump'
  #   guest_ok: yes
  #   public: yes
  #   writable: yes
  #   browsable: yes
  #   path: "{{ samba_shares_root }}/dump"

  - name: games
    comment: 'Games'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ samba_shares_root }}/ISO/Gry"

  - name: photos
    comment: 'Pictures'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ samba_shares_root }}/Pics"

  - name: books
    comment: 'Books'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ samba_shares_root }}/books"

  - name: comics
    comment: 'Comics'
    guest_ok: yes
    public: yes
    writable: yes
    browsable: yes
    path: "{{ samba_shares_root }}/comics"

downloads_user: "user"
downloads_password: "password"
cifs_username: "user"
cifs_password: "password"


###
### NFS
###
# Data you want published over NFS. More info on the NFS config format can be found at
# https://help.ubuntu.com/community/SettingUpNFSHowTo#Shares
# WARNING: Weird things might happen if you share the same data over Samba and NFS and allow writes on both!

nfs_shares_root: /mnt/Volume3

nfs_exports:
  - "{{ nfs_shares_root }}/public *(rw,sync,no_root_squash)"

###
### Cloudflare
###
# Cloudflare is a great free DNS option for domains. If you use the cloudflare_ddns container then you'll need to
# set the options below.

# Your domain name
cloudflare_zone: "{{ ansible_nas_domain }}"

# The hostname you want the container to update. You shouldn't need to change this.
cloudflare_host: "*.{{ cloudflare_zone }}"

# Email address used to register for Cloudflare
cloudflare_email: "{{ ansible_nas_email }}"

# Cloudflare 'Global API Key', can be found on the 'My Profile' page
cloudflare_api_key: abcdeabcdeabcdeabcde1234512345

###
### General
###
# Extra packages to install
ansible_nas_extra_packages:
  - smartmontools
  - htop
  - zfsutils-linux
  - bonnie++
  - unzip
  - lm-sensors
  - ctop
  - cifs-utils

ansible_python_interpreter: /usr/bin/python3

###
### Samba
###
# Seems to break browsing of the \\server-name shares root when enabled
samba_mitigate_cve_2017_7494: false

# Enable apple exentensions for compatibility with apple clients
samba_apple_extensions: yes

# The account used when Samba shares are accessed. Shouldn't need to change this unless you want to
# mess with Samba user permissions.
samba_guest_account: anarion-nas

# How Samba behaves when an unknown user connects, see Samba docs for more info
samba_map_to_guest: Bad Password

# The NetBIOS hostname used by Samba on your network
samba_netbios_name: "{{ ansible_nas_hostname }}"

# Name of the server workgroup.
samba_workgroup: "{{ ansible_nas_workgroup }}"

# SMTP email
ansible_smtp_host: "localhost"
ansible_smtp_port: "25"
ansible_smtp_from: "{{ ansible_nas_user }}@{{ ansible_nas_domain }}"
ansible_smtp_from_name: "{{ anisble_nas_user }}"
ansible_smtp_ssl: "false"

###
### Traefik
###
traefik_docker_image: traefik:latest
traefik_data_directory: "{{ docker_home }}/traefik"
traefik_debug: "false"

###
### Heimdall
###
heimdall_available_externally: "false"
heimdall_docker_image: linuxserver/heimdall:latest
heimdall_data_directory: "{{ docker_home }}/heimdall"
heimdall_port_http: "10080"
heimdall_port_https: "10443"
heimdall_watchtower_enable: "true"

###
### Organizr
###
organizr_available_externally: "false"
organizr_data_directory: "{{ docker_home }}/organizr"
organizr_port_http: "10081"
organizr_port_https: "10444"
organizr_user_id: "1000"
organizr_group_id: "1000"
organizr_watchtower_enable: "true"

###
### Transmission
###
transmission_available_externally: "false"
transmission_with_openvpn_available_externally: "false"
transmission_config_directory: "{{ docker_home }}/transmission/config"
transmission_download_directory: "{{ downloads_root }}"
transmission_watch_directory: "{{ torrents_root }}"
transmission_user_id: "1001"
transmission_group_id: "1001"
transmission_local_network: "192.168.1.0/24"
transmission_webui_port: "9092"
transmission_external_port: "51414"
transmission_watchtower_enable: "true"
transmission_openvpn_webui_port: "9091"
transmission_openvpn_external_port: "51415"
transmission_openvpn_proxy_port: "3128"
transmission_openvpn_ratio_limit_enabled: "true"
transmission_openvpn_ratio_limit: "2"
transmission_openvpn_watchtower_enable: "true"

# Transmission VPN Credentials
# If you're using Transmission with a VPN, you'll need to set these credentials.
# See https://github.com/haugene/docker-transmission-openvpn/ for supported VPN providers.
openvpn_username: leisure-suit-larry
openvpn_password: secretpassword
openvpn_provider: AWESOMEVPNPROVIDER
openvpn_config: United-Kingdom

###
### uTorrent
###
utorrent_available_externally: "false"
utorrent_config_directory: "{{ docker_home }}/utorrent/config"
utorrent_download_directory: "{{ downloads_root }}"
utorrent_port_http: "8111"
utorrent_port_bt: "6881"
utorrent_user_id: "1001"
utorrent_group_id: "1001"
utorrent_watchtower_enable: "true"

###
### Joomla
###
joomla_data_directory: "{{ docker_home }}/joomla"
joomla_available_externally: "false"
joomla_database_password: top_secret
joomla_port: "8181"
joomla_watchtower_enable: "true"

###
### pyLoad
###
pyload_available_externally: "false"
pyload_config_directory: "{{ docker_home }}/pyload"
pyload_download_directory: "{{ downloads_root }}"
pyload_user_id: "1001"
pyload_group_id: "1001"
pyload_port: "8000"
pyload_watchtower_enable: "true"

###
### Plex
###
# If you're paranoid, set permissions to "ro" so Plex won't ever be able to
# delete your files
plex_available_externally: "false"
plex_config_directory: "{{ docker_home }}/plex/config"
plex_logs: "{{ docker_home }}/plex/logs"
plex_movies_directory: "{{ movies_root }}"
plex_movies_permissions: "rw"
plex_anime_movies_directory: "{{ anime_movies_root }}"
plex_anime_movies_permissions: "rw"
plex_tv_directory: "{{ tv_root }}"
plex_tv_permissions: "rw"
plex_anime_series_directory: "{{ anime_series_root }}"
plex_anime_series_permissions: "rw"
plex_photos_directory: "{{ photos_root }}"
plex_photos_permissions: "rw"
plex_podcasts_directory: "{{ podcasts_root }}"
plex_podcasts_permissions: "rw"
plex_audiobooks_directory: "{{ audiobooks_root }}"
plex_audiobooks_permissions: "rw"
plex_music_directory: "{{ music_root }}"
plex_music_permissions: "rw"
plex_user_id: "1001"
plex_group_id: "1001"
plex_port: "32400"
plex_watchtower_enable: "true"

###
### Plex Autoscan
###
plex_autoscan_config_directory: "{{ docker_home }}/plex_autoscan/config"
plex_autoscan_movies_directory: "{{ movies_root }}"
plex_autoscan_movies_permissions: "ro"
plex_autoscan_tv_directory: "{{ tv_root }}"
plex_autoscan_tv_permissions: "ro"
plex_autoscan_photos_directory: "{{ photos_root }}"
plex_autoscan_photos_permissions: "ro"
plex_autoscan_podcasts_directory: "{{ podcasts_root }}"
plex_autoscan_podcasts_permissions: "ro"
plex_autoscan_music_directory: "{{ music_root }}"
plex_autoscan_music_permissions: "ro"
plex_autoscan_user_id: "1001"
plex_autoscan_group_id: "1001"
plex_autoscan_port: "3030"
plex_autoscan_watchtower_enable: "true"

###
### Plex Meta Manager
###
plex_meta_config_directory: "{{ docker_home }}/plex_meta/config"
plex_meta_movies_directory: "{{ movies_root }}"
plex_meta_movies_permissions: "ro"
plex_meta_tv_directory: "{{ tv_root }}"
plex_meta_tv_permissions: "ro"
plex_meta_photos_directory: "{{ photos_root }}"
plex_meta_photos_permissions: "ro"
plex_meta_podcasts_directory: "{{ podcasts_root }}"
plex_meta_podcasts_permissions: "ro"
plex_meta_music_directory: "{{ music_root }}"
plex_meta_music_permissions: "ro"
plex_meta_user_id: "1001"
plex_meta_group_id: "1001"
plex_meta_port: "3030"
plex_meta_watchtower_enable: "true"

###
### PyTivo
###
pytivo_available_externally: "false"
pytivo_config_directory: "{{ docker_home }}/pytivo/config"
pytivo_movies_directory: "{{ movies_root }}"
pytivo_tv_directory: "{{ tv_root }}"
pytivo_photos_directory: "{{ photos_root }}"
pytivo_music_directory: "{{ music_root }}"
pytivo_podcasts_directory: "{{ podcasts_root }}"
pytivo_user_id: "1001"
pytivo_group_id: "1001"
pytivo_watchtower_enable: "true"

###
### Homebridge
###
homebridge_available_externally: "false"
homebridge_config_directory: "{{ docker_home }}/homebridge/config"
homebridge_user_id: "1001"
homebridge_group_id: "1001"
homebridge_port: "8087"
homebridge_watchtower_enable: "true"

###
### Emby
###
# If you're paranoid, set permissions to "ro" so Emby won't ever be able to
# delete your files
emby_available_externally: "false"
emby_config_directory: "{{ docker_home }}/emby/config"
emby_movies_directory: "{{ movies_root }}"
emby_movies_permissions: "rw"
emby_tv_directory: "{{ tv_root }}"
emby_tv_permissions: "rw"
emby_user_id: "1001"
emby_group_id: "1001"
emby_port_http: "8096"
emby_port_https: "8920"
emby_watchtower_enable: "true"

###
### Tautulli
###
tautulli_available_externally: "false"
tautulli_config_directory: "{{ docker_home }}/tautulli/config"
tautulli_user_id: "1001"
tautulli_group_id: "1001"
tautulli_port: "8185"
tautulli_watchtower_enable: "true"


###
### Duplicati
###
duplicati_available_externally: "false"
duplicati_data_directory: "{{ docker_home }}/duplicati/config"
duplicati_port: "8200"
duplicati_watchtower_enable: "true"

###
### Syncthing
###
syncthing_available_externally: "false"
syncthing_data_directory: "{{ docker_home }}/syncthing/config"
syncthing_webui_port: "8384"
syncthing_listening_port: "22000"
syncthing_discovery_port: "21027"
syncthing_user_id: "1001"
syncthing_group_id: "1001"
syncthing_watchtower_enable: "true"

###
### Mylar
###
mylar_available_externally: "false"
mylar_data_directory: "{{ docker_home }}/mylar"
mylar_comics_directory: "{{ comics_root }}"
mylar_downloads_directory: "{{ downloads_root }}"
mylar_port_http: "8585"
mylar_user_id: "1001"
mylar_group_id: "1001"
mylar_watchtower_enable: "true"

###
### Sonarr
###
sonarr_available_externally: "false"
sonarr_data_directory: "{{ docker_home }}/sonarr/config"
sonarr_tv_directory: "{{ tv_root }}"
sonarr_download_directory: "{{ downloads_root }}"
sonarr_user_id: "1001"
sonarr_group_id: "1001"
sonarr_port: "8989"
sonarr_watchtower_enable: "true"

###
### Radarr
###
radarr_available_externally: "false"
radarr_movies_directory: "{{ movies_root }}"
radarr_download_directory: "{{ downloads_root }}"
radarr_data_directory: "{{ docker_home }}/radarr"
radarr_user_id: "1001"
radarr_group_id: "1001"
radarr_port: "7878"
radarr_watchtower_enable: "true"

###
### Bazarr
###
bazarr_available_externally: "false"
bazarr_data_directory: "{{ docker_home }}/bazarr/config"
bazarr_tv_directory: "{{ tv_root }}"
bazarr_movies_directory: "{{ movies_root }}"
bazarr_user_id: "1001"
bazarr_group_id: "1001"
bazarr_port: "6767"
bazarr_watchtower_enable: "true"

###
### lidarr
###
lidarr_available_externally: "false"
lidarr_data_directory: "{{ docker_home }}/lidarr/config"
lidarr_music_directory: "{{ music_root }}"
lidarr_downloads_directory: "{{ downloads_root }}"
lidarr_user_id: "1001"
lidarr_group_id: "1001"
lidarr_port: "8686"
lidarr_watchtower_enable: "true"

###
### lazylibrarian
###
lazylibrarian_available_externally: "false"
lazylibrarian_data_directory: "{{ docker_home }}/lazylibrarian/config"
lazylibrarian_music_directory: "{{ music_root }}"
lazylibrarian_downloads_directory: "{{ downloads_root }}"
lazylibrarian_books_directory: "{{ books_root }}"
lazylibrarian_user_id: "1001"
lazylibrarian_group_id: "1001"
lazylibrarian_port: "5299"
lazylibrarian_watchtower_enable: "true"

###
### booksonic
###
booksonic_available_externally: "false"
booksonic_data_directory: "{{ docker_home }}/booksonic/config"
booksonic_podcasts_directory: "{{ podcasts_root }}"
booksonic_othermedia_directory: "{{ othermedia_root }}"
booksonic_downloads_directory: "{{ downloads_root }}"
booksonic_audiobooks_directory: "{{ audiobooks_root }}"
booksonic_user_id: "1001"
booksonic_group_id: "1001"
booksonic_port: "4041"
booksonic_watchtower_enable: "true"

###
### booksonic-air
###
booksonicair_available_externally: "false"
booksonicair_data_directory: "{{ docker_home }}/booksonic-air/config"
booksonicair_podcasts_directory: "{{ podcasts_root }}"
#booksonicair_othermedia_directory: "{{ othermedia_root }}"
booksonicair_downloads_directory: "{{ downloads_root }}"
booksonicair_audiobooks_directory: "{{ audiobooks_root }}"
booksonicair_user_id: "1001"
booksonicair_group_id: "1001"
booksonicair_port: "4042"
booksonicair_watchtower_enable: "true"

###
### YouTubeDL-Material
###
youtubedlmaterial_available_externally: "false"
youtubedlmaterial_data_directory: "{{ docker_home }}/youtubedlmaterial"
youtubedlmaterial_dl_audio_directory: "{{ downloads_root }}/youtube/audio"
youtubedlmaterial_dl_video_directory: "{{ downloads_root }}/youtube/video"
youtubedlmaterial_dl_subscriptions_directory: "{{ downloads_root }}/youtube/subscriptions"
youtubedlmaterial_port_http: "8998"
youtubedlmaterial_user_id: "1001"
youtubedlmaterial_group_id: "1001"
youtubedlmaterial_watchtower_enable: "true"

###
### Couchpotato
###
couchpotato_available_externally: "false"
couchpotato_config_directory: "{{ docker_home }}/couchpotato/config"
couchpotato_movies_directory: "{{ movies_root }}"
couchpotato_downloads_directory: "{{ downloads_root }}"
couchpotato_torrents_directory: "{{ torrents_root }}"
couchpotato_user_id: "1001"
couchpotato_group_id: "1001"
couchpotato_port: "5050"
couchpotato_watchtower_enable: "true"

###
### Sickchill
###
sickchill_available_externally: "false"
sickchill_config_directory: "{{ docker_home }}/sickchill/config"
sickchill_tv_directory: "{{ tv_root }}"
sickchill_downloads_directory: "{{ downloads_root }}/completed"
sickchill_user_id: "1001"
sickchill_group_id: "1001"
sickchill_port: "8081"
sickchill_watchtower_enable: "true"


###
### Ombi
###
ombi_available_externally: "false"
ombi_config_directory: "{{ docker_home }}/ombi/config"
ombi_user_id: "1001"
ombi_group_id: "1001"
ombi_watchtower_enable: "true"

###
### Netdata
###
netdata_available_externally: "false"
netdata_port: "19999"
netdata_watchtower_enable: "true"

###
### OpenVPN
###
openvpn_config_directory: "{{ docker_home }}/openvpn"
openvpn_watchtower_enable: "true"


###
### Portainer
###
portainer_available_externally: "false"
portainer_data_directory: "{{ docker_home }}/portainer/config"
portainer_port: "9000"
portainer_watchtower_enable: "true"

###
### ZNC
###
znc_available_externally: "false"
znc_data_directory: "{{ docker_home }}/znc"
znc_user_id: "1001"
znc_group_id: "1001"
znc_port: "6677"
znc_watchtower_enable: "true"


###
### Stats
###
grafana_available_externally: "true"
telegraf_data_directory: "{{ docker_home }}/telegraf"
influxdb_data_directory: "{{ docker_home }}/influxdb2"
influxdb_init_mode: "setup"
influxdb_init_username: "root"
influxdb_init_password: "supersecure"
influxdb_init_org: "anarion"
influxdb_init_bucket: "anarion"
influxdb_init_retention: ""
influxdb_init_admin_token: ""
grafana_data_directory: "{{ docker_home }}/grafana"
stat_collection_interval: 15s
grafana_influxdb_port: "8086"
grafana_port: "3000"
influxdb_watchtower_enable: "false"
grafana_watchtower_enable: "true"
telegraf_watchtower_enable: "false"
telegraf_ipmi_user: "user"
telegraf_ipmi_password: "password"
telegraf_ipmi_host: "127.0.0.1"
telegraf_ipmi_interface: "lanplus"

###
### Gitea
###
gitea_available_externally: "false"
gitea_data_directory: "{{ docker_home }}/gitea"
gitea_port_http: "3001"
gitea_port_ssh: "222"
gitea_watchtower_enable: "true"

###
### Gitlab
###
gitlab_available_externally: "false"
gitlab_data_directory: "{{ docker_home }}/gitlab"
gitlab_port_http: "4080"
gitlab_port_https: "4443"
gitlab_port_ssh: "422"
gitlab_watchtower_enable: "true"

###
### Glances
###
glances_available_externally: "false"
glances_port_one: "61208"
glances_port_two: "61209"
glances_watchtower_enable: "true"

###
### Nextcloud
###
nextcloud_available_externally: "false"
nextcloud_data_directory: "{{ docker_home }}/nextcloud"
nextcloud_port: "8080"
nextcloud_watchtower_enable: "true"

###
### nginx
###
nginx_data_directory: "{{ docker_home }}/nginx"
nginx_port_http: "80"
nginx_port_https: "443"
nginx_watchtower_enable: "true"

###
### Guacamole
###
guacamole_available_externally: "false"
guacamole_data_directory: "{{ docker_home }}/guacamole"
guacamole_port: "8090"
guacamole_watchtower_enable: "true"

###
### Grocy
###
grocy_available_externally: "false"
grocy_data_directory: "{{ docker_home }}/grocy"
grocy_port: "9283"
grocy_user_id: "1001"
grocy_group_id: "1001"
grocy_watchtower_enable: "true"

###
### Gaps
###
gaps_available_externally: "false"
gaps_data_directory: "{{ docker_home }}/gaps"
gaps_port: "8484"
gaps_user_id: "1001"
gaps_group_id: "1001"
gaps_watchtower_enable: "true"

###
### Huginn
###
huginn_available_externally: "true"
huginn_data_directory: "{{ docker_home }}/huginn"
huginn_port: "3001"
huginn_user_id: "1001"
huginn_group_id: "1001"
huginn_watchtower_enable: "true"

###
### Miniflux
###
miniflux_available_externally: "false"
miniflux_data_directory: "{{ docker_home }}/miniflux"
miniflux_admin_username: admin
miniflux_admin_password: supersecure
miniflux_port: "8070"
miniflux_watchtower_enable: "true"

###
### Airsonic
###
airsonic_available_externally: "false"
airsonic_data_directory: "{{ docker_home }}/airsonic"
airsonic_music_directory: "{{ music_root }}"
airsonic_podcasts_directory: "{{ podcasts_root }}"
airsonic_port: "4040"
airsonic_watchtower_enable: "true"


###
### CloudCmd
###
cloudcmd_available_externally: "false"
cloudcmd_data_directory: "{{ docker_home }}/cloudcmd/config"
cloudcmd_browse_directory: "/"
cloudcmd_user_id: "1001"
cloudcmd_group_id: "1001"
cloudcmd_port: "7373"
cloudcmd_watchtower_enable: "true"

###
### Krusader
###
krusader_available_externally: "false"
krusader_config_directory: "{{ docker_home }}/krusader/config"
krusader_browse_directory: "/"
krusader_user_id: "1001"
krusader_group_id: "1001"
krusader_secure_connection: "0"
krusader_vnc_password: "topsecret"
krusader_port_http: "5800"
krusader_port_vnc: "5900"
krusader_watchtower_enable: "true"

###
### Watchtower
###
# Sets the 6 field cron schedule to use for checks and updates. This will check at 5am daily.
watchtower_cron_schedule: 0 0 5 * * *

# Sets the Watchtower Docker start command. Different options can be supplied based on whether you want to receive
# notifications or not, some examples are provided below. See https://github.com/v2tec/watchtower for more info.

# No notifications
watchtower_command: "--schedule '{{ watchtower_cron_schedule }}' --debug"

# Email notifications
# watchtower_command: "--schedule '{{ watchtower_cron_schedule }}' --notifications 'email' --notification-email-from 'ansible@nas.com' --notification-email-to '{{ ansible_nas_email }}' --notification-email-server 'my.email.server.com' --notification-email-server-port '25' --notification-email-server-user 'email_username' --notification-email-server-password 'top-secret'"

# Slack notifications
# watchtower_command: "--schedule '{{ watchtower_cron_schedule }}' --notifications 'slack' --notification-slack-hook-url 'https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy' --notification-slack-identifier 'anarion-nas'"

###
### Time Machine
###
timemachine_data_directory: "{{ docker_home }}/timemachine"
timemachine_volume_size_limit: "0"
timemachine_password: timemachine
timemachine_share_name: Data
timemachine_log_level: error
timemachine_port: "10445"
timemachine_watchtower_enable: "true"

###
### MiniDLNA
###
minidlna_media_directory1: "{{ movies_root }}"
minidlna_media_directory2: "{{ tv_root }}"
minidlna_friendly_name: "{{ ansible_nas_hostname }}"
minidlna_port: "8201"
minidlna_watchtower_enable: "true"

###
### get_iplayer
###
get_iplayer_available_externally: "false"
get_iplayer_config_directory: "{{ docker_home }}/get_iplayer"
get_iplayer_download_directory: "{{ tv_root }}/iplayer_downloads"
get_iplayer_port: "8182"
get_iplayer_watchtower_enable: "true"

###
### mymediaforalexa
###
mymediaforalexa_media_directory: "{{ music_root }}"
mymediaforalexa_data_directory: "{{ docker_home }}/mymediaforalexa"
mymediaforalexa_watchtower_enable: "true"

###
### Jackett
###
jackett_available_externally: "false"
jackett_data_directory: "{{ docker_home }}/jackett"
jackett_torrents_root: "{{ torrents_root }}"
jackett_port: "9117"
jackett_watchtower_enable: "true"

###
### The Lounge
###
thelounge_available_externally: "false"
thelounge_data_directory: "{{ docker_home }}/thelounge"
thelounge_port_one: "113"
thelounge_port_two: "9002"
thelounge_watchtower_enable: "true"

###
### Vaultwarden
###
vaultwarden_available_externally: "false"
vaultwarden_data_directory: "{{ docker_home }}/vaultwarden"
vaultwarden_port_a: "19080"
vaultwarden_port_b: "3012"
vaultwarden_watchtower_enable: "true"

# Keep this token secret, this is password to access admin area of your server!
# This token can be anything, but it's recommended to use a long, randomly generated string of characters,
# for example running openssl rand -base64 48
vaultwarden_admin_token: qwertyuiop1234567890poiuytrewq0987654321

# To create a user set this to "true", and reprovision the container by re-running the anarion-nas playbook.
# Once you have created your user, set to "false" and run one more time.
# Target just Vaultwarden by running: ansible-playbook -i inventory nas.yml -b -K -t vaultwarden
vaultwarden_allow_signups: "false"

###
### Firefly
###
firefly_available_externally: "false"
firefly_data_directory: "{{ docker_home }}/firefly"
firefly_port: "8066"
firefly_watchtower_enable: "true"
fireflycsv_available_externally: "false"
fireflycsv_access_token: ""
fireflycsv_data_directory: "{{ docker_home }}/fireflycsv"
fireflycsv_port: "8067"
fireflycsv_watchtower_enable: "true"

###
### Nzbget
###
nzbget_available_externally: "false"
nzbget_data_directory: "{{ docker_home }}/nzbget"
nzbget_download_directory: "{{ downloads_root }}"
nzbget_user_id: "1001"
nzbget_group_id: "1001"
nzbget_port: "6789"
nzbget_watchtower_enable: "true"

###
### SABNzbd
###
sabnzbd_available_externally: "false"
sabnzbd_data_directory: "{{ docker_home }}/sabnzbd"
sabnzbd_download_directory: "{{ downloads_root }}"
sabnzbd_user_id: "1001"
sabnzbd_group_id: "1001"
sabnzbd_port_http: "8080"
sabnzbd_port_https: "9090"
sabnzbd_watchtower_enable: "true"

###
### Nzbhydra2
###
nzbhydra2_available_externally: "false"
nzbhydra2_data_directory: "{{ docker_home }}/nzbhydra2"
nzbhydra2_download_directory: "{{ downloads_root }}"
nzbhydra2_user_id: "1001"
nzbhydra2_group_id: "1001"
nzbhydra2_port: "5076"
nzbhydra2_watchtower_enable: "true"

###
### Wallabag
###
wallabag_available_externally: "false"
wallabag_data_directory: "{{ docker_home }}/wallabag"
wallabag_port: "7780"
wallabag_watchtower_enable: "true"

###
### Mosquitto
###
mosquitto_available_externally: "false"
mosquitto_data_directory: "{{ docker_home }}/mosquitto"
mosquitto_port_a: "1883"
mosquitto_port_b: "9001"
mosquitto_watchtower_enable: "true"

###
### Calibre
###
calibre_available_externally: "false"
calibre_data_directory: "{{ docker_home }}/calibre"
calibre_user_id: "1001"
calibre_group_id: "1001"
calibre_books_root: "{{ books_root }}"
calibre_port: "8084"
# To disable ebook conversion set calibre_ebook_conversion to "". To enable it set it to "linuxserver/calibre-web:calibre"
calibre_ebook_conversion: "linuxserver/calibre-web:calibre"
calibre_watchtower_enable: "true"

###
### Home Assistant
###
homeassistant_available_externally: "false"
homeassistant_data_directory: "{{ docker_home }}/homeassistant"
homeassistant_port: "8123"
homeassistant_watchtower_enable: "true"

###
### openHAB
###
openhab_available_externally: "false"
openhab_docker_image: openhab/openhab:latest
openhab_data_directory: "{{ docker_home }}/openhab"
openhab_port_http: "7777"
openhab_port_https: "7778"
openhab_watchtower_enable: "true"

###
### Jellyfin
###
# If you're paranoid, set permissions to "ro" so jellyfin won't ever be able to
# delete your files
jellyfin_available_externally: "false"
jellyfin_config_directory: "{{ docker_home }}/jellyfin/config"
jellyfin_movies_directory: "{{ movies_root }}"
jellyfin_movies_permissions: "rw"
jellyfin_music_directory: "{{ music_root }}"
jellyfin_music_permissions: "rw"
jellyfin_photos_directory: "{{ photos_root }}"
jellyfin_photos_permissions: "rw"
jellyfin_tv_directory: "{{ tv_root }}"
jellyfin_tv_permissions: "rw"
jellyfin_user_id: "1001"
jellyfin_group_id: "1001"
jellyfin_port_http: "8896"
jellyfin_port_https: "8928"
jellyfin_watchtower_enable: "true"

###
### Ubooquity
###
ubooquity_available_externally: "false"
ubooquity_data_directory: "{{ docker_home }}/ubooquity"
ubooquity_user_id: "1001"
ubooquity_group_id: "1001"
ubooquity_port_webui: "2202"
ubooquity_port_admin: "2203"
ubooquity_watchtower_enable: "true"

###
### Komga
###
komga_available_externally: "false"
komga_data_directory: "{{ docker_home }}/komga"
komga_comics_directory: "{{ comics_root }}"
komga_user_id: "1001"
komga_group_id: "1001"
komga_port: "8095"
komga_watchtower_enable: "true"

###
### Kavita
###
kavita_available_externally: "false"
kavita_data_directory: "{{ docker_home }}/kavita"
kavita_comics_directory: "{{ comics_root }}"
kavita_user_id: "1001"
kavita_group_id: "1001"
kavita_port: "5002"
kavita_watchtower_enable: "true"

###
### Serposcope
###
serposcope_data_directory: "{{ docker_home }}/serposcope"
serposcope_port: 7134
serposcope_available_externally: "false"
serposcope_watchtower_enable: "true"

###
### Virtual Desktop
###
vd_data_directory: "{{ docker_home }}/virtual_desktop"
vd_docker_image: "rattydave/docker-ubuntu-xrdp-mate-custom:20.04-tools"
vd_users:
  - username: "{{ ansible_nas_user }}"
    password: "topsecret"
    sudo: "Y"
vd_rdp_port: 3389
vd_watchtower_enable: "true"

###
### HS110
###
hs110_timer: "5000"
hs110_device_ip: "192.168.2.25"
hs110_influx_host: "192.168.2.13"
hs110_hostname: "HS110"
hs110_watchtower_enable: "true"

###
### Snipe-It
###
snipeit_available_externally: "false"
snipeit_data_directory: "{{ docker_home }}/snipeit"
snipeit_mail_server: "smtp-relay.gmail.com"
snipeit_mail_server_port: "465"
snipeit_mail_from_address: "email@email.com"
snipeit_mail_from_name: "Name"
snipeit_mail_encryption: "tls"
snipeit_mail_username: "username"
snipeit_mail_password: "password"
snipeit_replyto_addr: "{{ ansible_nas_email }}"
snipeit_app_key: ""
snipeit_port: "9111"
snipeit_watchtower_enable: "true"

###
### Shaarli
###
shaarli_available_externally: "false"
shaarli_data_directory: "{{ docker_home }}/shaarli"
shaarli_user_id: "100"
shaarli_group_id: "101"
shaarli_port: "8001"
shaarli_watchtower_enable: "true"

###
### Node-red
###
nodered_available_externally: "false"
nodered_data_directory: "{{ docker_home }}/nodered"
nodered_user_id: "1001"
nodered_group_id: "1001"
nodered_port: "1880"
nodered_watchtower_enable: "true"

###
### MariaDB
###
mariadb_available_externally: "false"
mariadb_data_directory: "{{ docker_home }}/mariadb"
mariadb_root_password: "my_secret_password"
mariadb_database: ""
mariadb_user: ""
mariadb_password: ""
mariadb_user_id: "1001"
mariadb_group_id: "1001"
mariadb_port: "8085"
mariadb_watchtower_enable: "false"

###
### Seafile
###
seafile_available_externally: "false"
seafile_data_directory: "{{ docker_home }}/seafile"
seafile_db_root_password: "my_secret_password"
seafile_database: "seafile"
seafile_db_user: "seafile-user"
seafile_db_password: "seafile-password"
seafile_admin_email: "{{ ansible_nas_email }}"
seafile_admin_password: "asecret"
seafile_server_letsencrypt: "false"
seafile_server_hostname: "seafile.{{ ansible_nas_domain }}"
seafile_user_id: "1001"
seafile_group_id: "1001"
seafile_port: "8082"
seafile_watchtower_enable: "false"

###
### phpMyAdmin
###
phpmyadmin_available_externally: "true"
phpmyadmin_data_directory: "{{ docker_home }}/phpmyadmin"
phpmyadmin_user_id: "1001"
phpmyadmin_group_id: "1001"
phpmyadmin_port: "8087"
phpmyadmin_watchtower_enable: "true"
phpmyadmin_databases:
  - "mariadb"
  - "firefly-mysql"
  - "nextcloud-mysql"
  - "seafile-mysql"
  - "snipeit-mysql"

###
### error pages
###
#error_pages_available_externally: "true"
error_pages_data_directory: "{{ docker_home }}/errors"
error_pages_port: "8100"
error_pages_watchtower_enable: "true"


###
### Flarum
###
flarum_available_externally: "true"
flarum_data_directory: "{{ docker_home }}/flarum"
flarum_port: "8002"
flarum_user_id: "1001"
flarum_group_id: "1001"
flarum_memory_limit: "256M" #PHP memory limit (default 256M)
flarum_max_upload_size: "16M" #Upload max size (default 16M)
flarum_clear_env: "yes" #Clear environment in FPM workers (default yes)
flarum_php_opcache: "128" #PHP OpCache memory consumption (default 128)
flarum_enable_ipv6: "true" #Enable IPv6 for Nginx (default true)
flarum_real_ip_from: "0.0.0.0/32" #Trusted addresses that are known to send correct replacement addresses (default 0.0.0.0/32)
flarum_real_ip_header: "X-Forwarded-For" #Request header field whose value will be used to replace the client address (default X-Forwarded-For)
flarum_log_ip_var: "remote_addr" #Use another variable to retrieve the remote IP address for access log_format on Nginx. (default remote_addr)
flarum_debug: "false" #Enables or disables debug mode, used to troubleshoot issues (default false)
flarum_base_url: "https://flarum.{{ ansible_nas_domain }}/" #The URL to your Flarum installation required
flarum_forum_title: "Flarum Dockerized" #Flarum forum title, only used during first installation (default Flarum Dockerized)
flarum_api_path: "api" #Flarum api path (default api)
flarum_admin_path: "admin" #Flarum admin path (default admin)
flarum_db_host: "db" #MySQL database hostname / IP address required
flarum_db_port: "3306" #MySQL database port (default 3306)
flarum_db_name: "flarum" #MySQL database name (default flarum)
flarum_db_user: "flarum" #MySQL user (default flarum)
flarum_db_password: "password" #MySQL password
flarum_db_prefix: "flarum_" #MySQL database prefix (default flarum_)
flarum_db_timeout: "60" #Time in seconds after which we stop trying to reach the MySQL server (useful for clusters, default 60)
flarum_watchtower_enable: "true"

##
## Restic
##
#restic_url:
restic_version:	"0.11.0" #The version of Restic to install
restic_download_path: "/opt/restic" #Download location for the restic binary
restic_install_path: "/usr/local/bin" #Install location for the restic binary
restic_script_dir: "~/restic" #Location of the generated backup scripts
restic_log_dir: "{{ restic_script_dir }}/log" #Location of the logs of the backup scripts
restic_create_cron: "false" #Should a cronjob be created for each backup
restic_dir_owner: "root" #The owner of all created dirs
restic_dir_group: "root" #The group of all created dirs

restic_repos:
  remote:
    location: "location"
    password: "securepassword"
    init: true

restic_backups:
  data:
    name: "data"
    repo: "remote"
    src: "/path/to/data"
    scheduled: true
    schedule_hour: 1

#
# ttrss
#
ttrss_available_externally: "true"
ttrss_data_directory: "{{ docker_home }}/ttrss"
ttrss_port: "8280"
ttrss_user_id: "1001"
ttrss_group_id: "1001"
ttrss_db_host: "db"
ttrss_db_name: "ttrss"
ttrss_db_user: "ttrss"
ttrss_db_pass: "password"
ttrss_db_port: "5432"
ttrss_smtp_from_name: "Tiny Tiny RSS"
ttrss_smtp_from_address: "ttrss@{{ ansible_nas_domain }}"
ttrss_url: "https://ttrss.{{ ansible_nas_domain }}"
ttrss_watchtower_enable: "true"

#
# OpenLDAP
#
openldap_available_externally: "false"
phpldapadmin_available_externally: "true"
openldap_data_directory: "{{ docker_home }}/openldap"
openldap_port: "1389"
openldap_port_ssl: "1636"
phpldapadmin_port: "6443"
openldap_ldap_root: dc=anarion,dc=pl
openldap_admin_username: "admin"
openldap_admin_password: "adminpassword"
openldap_user_id: "1001"
openldap_group_id: "1001"
openldap_organization: "My Organization"
openldap_domain: "my-organization.com"
openldap_watchtower_enable: "true"
phpldapadmin_watchtower_enable: "true"
openldap_ldap_users: "anarion,anarion-nas"
openldap_ldap_passwords: "password1, password2"
openldap_ldap_user_dc: "People"
openldap_ldap_group: "Group"
openldap_ldap_skip_default_tree: "no"
openldap_ldap_allow_anon_binding: "yes"

#
# speedtest
#
speedtest_available_externally: "true"
speedtest_data_directory: "{{ docker_home }}/speedtest"
speedtest_webui_port: "8288"
speedtest_user_id: "1001"
speedtest_group_id: "1001"
speedtest_password: "secure"
speedtest_custom_results: "false"
speedtest_db_type: ""
speedtest_db_name: ""
speedtest_db_hostname: ""
speedtest_db_username: ""
speedtest_db_password: ""
speedtest_watchtower_enable: "true"

#
# webtrees
#
webtrees_available_externally: "true"
webtrees_data_directory: "{{ docker_home }}/webtrees"
webtrees_http_port: "8289"
webtrees_https_port: "8290"
webtrees_lang: "en-us"
webtrees_pretty_urls: "false"
webtrees_base_url: "https://webtrees.{{ ansible_nas_domain }}"
webtrees_user_id: "1001"
webtrees_group_id: "1001"
webtrees_db_type: "sqlite"
webtrees_db_name: ""
webtrees_db_host: ""
webtrees_db_user: ""
webtrees_db_pass: ""
webtrees_db_port: ""
webtrees_db_prefix: ""
webtrees_wt_user: ""
webtrees_wt_name: ""
webtrees_wt_pass: ""
webtrees_wt_email: ""
webtrees_watchtower_enable: "true"

#
# photoprism
#
photoprism_available_externally: "true"
photoprism_watchtower_enable: "true"
photoprism_data_directory: "{{ docker_home }}/photoprism"
photoprism_user_id: "1001"
photoprism_group_id: "1001"
photoprism_umask: "117"
photoprism_admin_password: "insecure"
photoprism_http_port: "2342"
photoprism_http_compression: "false"
photoprism_debug: "false"
photoprism_public: "false"
photoprism_readonly: "false"
photoprism_experimental: "false"
photoprism_disable_webdav: "false"
photoprism_disable_settings: "false"
photoprism_disable_tensorflow: "false"
photoprism_darktable_presets: "false"
photoprism_detect_nsfw: "false"
photoprism_upload_nsfw: "true"
photoprism_database_driver: "mysql"
photoprism_database_server: "db:3306"
photoprism_database_name: "photoprism"
photoprism_database_user: "photoprism"
photoprism_database_password: "insecure"
photoprism_site_url: "https://photoprism.{{ ansible_nas_domain }}"
photoprism_site_title: "PhotoPrism"
photoprism_site_caption: "Browse Your Life"
photoprism_site_description: ""
photoprism_site_author: ""

#
# photostructure
#
photostructure_available_externally: "true"
photostructure_watchtower_enable: "true"
photostructure_data_directory: "{{ docker_home }}/photostructure"
photostructure_user_id: "1001"
photostructure_group_id: "1001"
photostructure_http_port: "1787"

#
# whoogle
#
whoogle_available_externally: "true"
whoogle_watchtower_enable: "true"
whoogle_data_directory: "{{ docker_home }}/whoogle"
whoogle_port: "5000"
whoogle_user: "whoogle"
whoogle_pass: "insecure"
whoogle_proxy_user: "proxy-user"
whoogle_proxy_password: "insecure"
whoogle_proxy_type: "" #<proxy type (http|socks4|socks5)
whoogle_proxy_loc: "" #<proxy host/ip>
whoogle_alt_tw: "" #nitter.net
whoogle_alt_yt: "" #invidious.snopyta.org
whoogle_alt_ig: "" #bibliogram.art/u
whoogle_alt_rd: "" #libredd.it

#
# librephotos
#
librephotos_available_externally: "true"
librephotos_watchtower_enable: "true"
librephotos_image_tag: "dev"
librephotos_data_directory: "{{ docker_home }}/librephotos"
librephotos_secret_key: "pOdusJKQEf9gNS7ZlrlO"
librephotos_admin_email: "{{ ansible_nas_email }}"
librephotos_admin_username: "admin"
librephotos_admin_password: "insecure"
librephotos_debug: "false"
librephotos_proxy_port: "3002"
librephotos_db_name: "librephotos"
librephotos_db_user: "docker"
librephotos_db_pass: "insecure"
librephotos_mapbox_api_key: "key"
librephotos_web_concurrency: "2"
librephotos_worker_timeout: "1800"
librephotos_skip_patterns: ""
librephotos_user_id: "1001"
librephotos_group_id: "1001"

#
# barcodebuddy
#
barcodebuddy_available_externally: "true"
barcodebuddy_watchtower_enable: "true"
barcodebuddy_data_directory: "{{ docker_home }}/barcodebuddy"
barcodebuddy_http_port: "8201"
barcodebuddy_https_port: "8202"
barcodebuddy_user_id: "1001"
barcodebuddy_group_id: "1001"
barcodebuddy_scanner: "false"
barcodebuddy_ignore_ssl_ca: "true"
barcodebuddy_ignore_ssl_host: "true"
barcodebuddy_grocy_url: "https://grocy.{{ ansible_nas_domain }}"

#
# beets
#
beets_available_externally: "true"
beets_watchtower_enable: "true"
beets_data_directory: "{{ docker_home }}/beets"
beets_music_directory: "{{ music_root }}"
beets_downloads_directory: "{{ downloads_root }}"
beets_port: "8337"
beets_user_id: "1001"
beets_group_id: "1001"

#
# ghost
#
ghost_available_externally: "true"
ghost_watchtower_enable: "true"
ghost_data_directory: "{{ docker_home }}/ghost"
ghost_port: "8400"
ghost_db_client: "mysql"
ghost_db_host: "ghost_db"
ghost_db_user: "root"
ghost_db_password: "password"
ghost_db_database: "ghost"
ghost_mail_from: "'Ghost Publishing' <ghost@example.com>"
ghost_mail_transport: "SMTP"
ghost_mail_options_service: "Mailgun"
ghost_mail_options_host: "smtp.eu.mailgun.org"
ghost_mail_options_port: "587"
ghost_mail_options_secure: "false"
ghost_mail_options_auth: ""
ghost_mail_options_pass: ""
ghost_url: "https://ghost.{{ ansible_nas_domain }}"
ghost_mysql_root_password: "password"

#
# moviematch
#
moviematch_available_externally: "true"
moviematch_watchtower_enable: "true"
moviematch_plex_url: ""
moviematch_plex_token: ""
moviematch_port: "8221"
moviematch_root_path: "" #The root path to use when loading resources. For example, if MovieMatch is on a sub-path, the ROOT_PATH should be set to that sub-path (without a trailing slash)
moviematch_library_filter: "" #A list of libraries to be included in the cards, comma delimited. e.g. Films, or Films,Television, or Films,Workout Videos
moviematch_collection_filter: "" #A list of collections to be included in the cards, comma delimited. e.g. Marvel, or Marvel,HBO
moviematch_default_section_type_filter: "movie" #The first library with this type will be chosen as a default library
moviematch_link_type: "app" #The method to use for opening match links
moviematch_log_level: "INFO" #How much the server should log
moviematch_movie_batch_size: "25" #How many movies to get from the server initially. Unless you're running out of cards really quickly you should leave this alone.

#
# graylog
#
graylog_available_externally: "true"
graylog_watchtower_enable: "true"
graylog_data_directory: "{{ docker_home }}/graylog"
graylog_web_port: "9010"
graylog_syslog_tcp_port: "1514"
graylog_syslog_udp_port: "1514"
graylog_gelf_tcp_port: "12201"
graylog_gelf_udp_port: "12201"
graylog_password_secret: "super_secret_password"
graylog_root_password_sha2: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
graylog_http_external_uri: "https://graylog.{{ ansible_nas_domain }}/"
graylog_email_enabled: "false"
graylog_email_hostname: "smtp"
graylog_email_port: "25"
graylog_email_use_auth: "false"
graylog_email_use_tls: "false"
graylog_email_use_ssl: "false"
graylog_email_auth_username: ""
graylog_email_auth_password: ""
graylog_email_subject_prefix: "[graylog]"
graylog_email_from_email: "admin@{{ ansible_nas_domain }}"

#
# netbox
#
netbox_available_externally: "true"
netbox_watchtower_enable: "true"
netbox_port: "8205"
netbox_data_directory: "{{ docker_home }}/netbox"
netbox_service_user: "anarion-nas"
netbox_user_id: "1001"
netbox_group_id: "1001"
netbox_postgres_db: "netbox"
netbox_postgres_password: "J5brHrAXFLQSif0K"
netbox_postgres_user: "netbox"
netbox_redis_password: "H733Kdjndks81"
netbox_redis_cache_password: "t4Ph722qJ5QHeQ1qfu36"
netbox_cors_origin_allow_all: "true"
netbox_allowed_hosts: "localhost ::1 127.0.0.1 netbox.{{ ansible_nas_domain }} {{ ansible_default_ipv4.address }}"
netbox_db_host: "netbox_netbox-postgres_1"
netbox_db_name: "netbox"
netbox_db_password: "J5brHrAXFLQSif0K"
netbox_db_user: "netbox"
netbox_db_port: "5432"
netbox_email_from: "netbox@{{ ansible_nas_domain }}"
netbox_email_password: ""
netbox_email_port: "25"
netbox_email_server: "localhost"
netbox_email_ssl_certfile: ""
netbox_email_ssl_keyfile: ""
netbox_email_timeout: "5"
netbox_email_username: "netbox"
# EMAIL_USE_SSL and EMAIL_USE_TLS are mutually exclusive, i.e. they can't both be `true`!
netbox_email_use_ssl: "false"
netbox_email_use_tls: "false"
netbox_max_page_size: "1000"
netbox_media_root: "/opt/netbox/netbox/media"
netbox_metrics_enabled: "false"
netbox_napalm_password: ""
netbox_napalm_timeout: "30"
netbox_napalm_username: ""
netbox_redis_cache_database: "1"
netbox_redis_cache_host: "netbox_netbox-redis-cache_1"
netbox_redis_port: "6379"
netbox_redis_cache_port: "6379"
netbox_redis_cache_ssl: "false"
netbox_redis_database: "0"
netbox_redis_host: "netbox_netbox-redis_1"
netbox_redis_ssl: "false"
netbox_release_check_url: "https://api.github.com/repos/netbox-community/netbox/releases"
netbox_secret_key: "r8OwDznj!!dci#P9ghmRfdu1Ysxm0AiPeDCQhKE+N_rClfWNj"
netbox_skip_startup_scripts: "false"
netbox_skip_superuse: "false"
netbox_superuser_api_token: "0123456789abcdef0123456789abcdef01234567"
netbox_superuser_email: "{{ ansible_nas_email }}"
netbox_superuser_name: "admin"
netbox_superuser_password: "admin"
netbox_webhooks_enabled: "true"

#
# keycloak
#
keycloak_available_externally: "true"
keycloak_watchtower_enable: "true"
keycloak_data_directory: "{{ docker_home }}/keycloak"
keycloak_user: "admin"
keycloak_password: "password"
keycloak_proxy_address_forwarding: "true"
keycloak_port: "8099"


#
# authelia
#
authelia_available_externally: "true"
authelia_watchtower_enable: "true"
authelia_data_directory: "{{ docker_home }}/authelia"
authelia_port: "9093"

#
# authentik
#
authentik_image: "goauthentik.io/server"
authentik_tag: "2021.10.4"
authentik_available_externally: "true"
authentik_watchtower_enable: "true"
authentik_data_directory: "{{ docker_home }}/authentik"
authentik_http_port: "9003"
authentik_https_port: "9443"
authentik_error_reporting: "false"
authentik_pg_user: "authentik"
authentik_pg_pass: "authentik"
authentik_pg_db: "authentik"
authentik_secret_key: "secret"
authentik_email_host: "localhost"
authentik_email_port: "25"
authentik_email_username: ""
authentik_email_password: ""
authentik_email_use_tls: "false"
authentik_email_use_ssl: "false"
authentik_email_timeout: "10"
authentik_email_from: "authentik@{{ ansible_nas_domain }}"
authentik_geoipupdate_account_id: ""
authentik_geoipupdate_license_key: ""
authentik_geoipupdate_edition_ids: "GeoLite2-ASN GeoLite2-City GeoLite2-Country"
authentik_geoip: "/geoip/GeoLite2-City.mmdb"
authentik_disable_update_check: "true"
authentik_disable_startup_analytics: "true"
authentik_avatars: "gravatar"


#
# flame
#
flame_available_externally: "true"
flame_watchtower_enable: "true"
flame_data_directory: "{{ docker_home }}/flame"
flame_port: "5005"
flame_user_id: "1001"
flame_group_id: "1001"

#
# gotify
#
gotify_enabled: false
gotify_available_externally: "false"
gotify_watchtower_enable: "true"
# data directory
gotify_data_directory: "{{ docker_home }}/gotify"
# docker image to use
gotify_docker_image: gotify/server:latest
# network
gotify_port: "2346"
gotify_hostname: "gotify"
# user to run container with
gotify_user_id: "1001"
gotify_group_id: "1001"
# specs
gotify_memory: 200m

#
# prowlarr
#
prowlarr_enabled: false
prowlarr_watchtower_enable: "true"
prowlarr_available_externally: "false"
# directories
prowlarr_data_directory: "{{ docker_home }}/prowlarr/config"
# uid / gid
prowlarr_user_id: "1001"
prowlarr_group_id: "1001"
# network
prowlarr_port: "9696"
prowlarr_hostname: "prowlarr"
# specs
prowlarr_memory: 1g

#
# netbootxyz
#
netbootxyz_enabled: false
netbootxyz_available_externally: "false"
netbootxyz_watchtower_enable: "true"
# directories
netbootxyz_config_directory: "{{ docker_home }}/netbootxyz/config"
netbootxyz_assets_directory: "{{ docker_home }}/netbootxyz/assets"
# network
netbootxyz_hostname: netbootxyz
netbootxyz_port_http: "3002"
netbootxyz_port_http2: "5803"
netbootxyz_port_tftp: "69"
# uid/gid
netbootxyz_user_id: "1001"
netbootxyz_group_id: "1001"
# specs
netbootxyz_memory: 1g

###
### Minetest
###
minetest_available_externally: "false"
minetest_data_directory: "{{ docker_home }}/minetest"
minetest_port_http: "30000"
minetest_user_id: "1001"
minetest_group_id: "1001"
minetest_watchtower_enable: "true"

###
### Frigate
###
frigate_available_externally: "false"
frigate_data_directory: "{{ docker_home }}/frigate"
frigate_port: "5001"
frigate_rtmp_port: "1936"
frigate_user_id: "1001"
frigate_group_id: "1001"
frigate_watchtower_enable: "true"
frigate_rtsp_password: "password"
frigate_camera_username: "username"
frigate_camera_password: "password"
frigate_mqtt_host: "{{ ansible_nas_hostname }}"
frigate_mqtt_port: "{{ mosquitto_port_a }}"

#
# claper
#
claper_available_externally: "true"
claper_watchtower_enable: "true"
claper_data_directory: "{{ docker_home }}/claper"
claper_port: "4000"
claper_user_id: "1001"
claper_group_id: "1001"
claper_db_pass: "claper"
claper_db_user: "claper"
claper_db_name: "claper"
claper_endpoint_host: "claper.{{ ansible_nas_domain }}"
claper_endpoint_port: "80"
claper_mail_transport: "local"
claper_mail_from: "claper@{{ ansible_nas_domain }}"
claper_mail_from_name: "Claper"
claper_smtp_relay: ""
claper_smtp_username: "username"
claper_smtp_password: "password"
claper_smtp_port: "25"
claper_smtp_tls: "always"
claper_smtp_auth: "always"
claper_smtp_ssl: "true"
claper_presentation_storage: "local"
claper_aws_access_key_id: ""
claper_aws_secret_access_key: ""
claper_aws_s3_bucket: ""
claper_aws_s3_region: ""

#
# ssh login notification
#
pushover_url: "https://api.pushover.net/1/messages.json"
pushover_token: "token"
pushover_user_key: "user_key"

###
### codex
###
codex_available_externally: "false"
codex_data_directory: "{{ docker_home }}/codex"
codex_port: "9810"
codex_comics_directory: "{{ comics_root }}"
codex_user_id: "501"
codex_group_id: "20"
codex_watchtower_enable: "true"

###
### releasebell
###
releasebell_available_externally: "false"
releasebell_data_directory: "{{ docker_home }}/releasebell"
releasebell_image_version: "v1"
releasebell_port: "9094"
releasebell_user_id: "1001"
releasebell_group_id: "1001"
releasebell_watchtower_enable: "true"
releasebell_ldap_url: "ldaps://127.0.0.1:3002"
releasebell_ldap_users_base_dn: "ou=users,dc=example"
releasebell_ldap_bind_dn: "CN=admin,ou=users,dc=example"
releasebell_ldap_bind_password: "adminpassword"
releasebell_mail_smtp_server: "smtp.example.com"
releasebell_mail_smtp_port: "25"
releasebell_mail_smtp_username: ""
releasebell_mail_smtp_password: ""
releasebell_mail_from: "releasebell@{{ ansible_nas_domain }}"
releasebell_mail_domain: "example.com"
releasebell_app_origin: "example.com"
releasebell_mysql_host: "mysql"
releasebell_mysql_port: "3306"
releasebell_mysql_username: ""
releasebell_mysql_password: ""
releasebell_mysql_database: ""

###
### Trilium
###
trilium_available_externally: "false"
trilium_data_directory: "{{ docker_home }}/trilium"
trilium_port: "8088"
trilium_user_id: "1001"
trilium_group_id: "1001"
trilium_watchtower_enable: "true"
trilium_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"

###
### immich
###
immich_available_externally: "false"
immich_data_directory: "{{ docker_home }}/immich"
immich_port: "8089"
immich_user_id: "1001"
immich_group_id: "1001"
immich_watchtower_enable: "true"
immich_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"
immich_upload_directory: "{{ docker_home }}/immich/upload"
immich_db_password: "postgres"
immich_db_username: "postgres"
immich_db_name: "immich"
immich_db_hostname: "immich_postgres"
immich_db_port: "5432"
immich_jwt_secret: "verylongandsecrettext"
immich_enable_mapbox: "false"
immich_mapbox_key: ""
immich_vite_login_message: "Welcome to Immich!"

###
### Loki
###
loki_available_externally: "false"
loki_data_directory: "{{ docker_home }}/loki"
loki_port: "3100"
loki_user_id: "1001"
loki_group_id: "1001"
loki_watchtower_enable: "true"
loki_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"

###
### photofield
###
photofield_available_externally: "false"
photofield_data_directory: "{{ docker_home }}/photofield"
photofield_port: "8082"
photofield_user_id: "1001"
photofield_group_id: "1001"
photofield_watchtower_enable: "true"
photofield_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"
photofield_photos_directory: "{{ docker_home }}/photofield/photos"

###
### wger
###
wger_available_externally: "false"
wger_data_directory: "{{ docker_home }}/wger"
wger_port: "8003"
wger_user_id: "1001"
wger_group_id: "1001"
wger_watchtower_enable: "true"
wger_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"
wger_secret_key: "wger-docker-supersecret-key-1234567890!@#$%^&*(-_)"
wger_signing_key: "wger-docker-secret-jwtkey-1234567890!@#$%^&*(-_=+)"
wger_email_from: "wger@{{ ansible_nas_domain }}"
wger_email_enable: "true"
wger_email_host: ""
wger_email_port: ""
wger_email_user: ""
wger_email_password: ""
wger_email_use_tls: "false"
wger_email_use_ssl: "false"
wger_csrf_trusted_origins: "https://wger.{{ ansible_nas_domain}},https://118.999.881.119"
wger_django_debug: "false"

###
### memos
###
memos_available_externally: "false"
memos_data_directory: "{{ docker_home }}/memos"
memos_port: "5230"
memos_user_id: "1001"
memos_group_id: "1001"
memos_watchtower_enable: "true"
memos_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"

###
### libreddit
###
libreddit_available_externally: "false"
libreddit_data_directory: "{{ docker_home }}/libreddit"
libreddit_port: "8091"
libreddit_user_id: "1001"
libreddit_group_id: "1001"
libreddit_watchtower_enable: "true"
libreddit_traefik_whitelist: "127.0.0.1/32, 192.168.0.0/16"
libreddit_theme: "system"
libreddit_front_page: "default"
libreddit_layout: "card"
libreddit_wide: "off"
libreddit_post_sort: "host"
libreddit_comment_sort: "confidence"
libreddit_show_nsfw: "off"
libreddit_blur_nsfw: "off"
libreddit_use_hls: "off"
libreddit_hide_hls: "off"
libreddit_autoplay: "off"