{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Proxmox Host IPMI Dashboard using the Telegraf IPMI plugin",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": 9985,
  "graphTooltip": 0,
  "id": 6,
  "iteration": 1652783539441,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "includeVars": true,
      "keepTime": true,
      "tags": [
        "vSphere Telegraf"
      ],
      "targetBlank": true,
      "title": "More Dashboards",
      "type": "dashboards"
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "datasource": {
        "type": "influxdb",
        "uid": "aT8eChcMk"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 76,
      "panels": [],
      "title": "pve2",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#299c46",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 70
              },
              {
                "color": "#d44a3a",
                "value": 85
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "FAN1"
            },
            "properties": [
              {
                "id": "unit",
                "value": "rotrpm"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 700
                    },
                    {
                      "color": "red",
                      "value": 1200
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FAN2"
            },
            "properties": [
              {
                "id": "unit",
                "value": "rotrpm"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 700
                    },
                    {
                      "color": "red",
                      "value": 1200
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FAN4"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-blue",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 5000
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FANB"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-blue",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 5000
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 0,
        "y": 1
      },
      "id": 135,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "background",
        "fieldOptions": {
          "calcs": [
            "lastNotNull"
          ]
        },
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"cpu_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"CPU Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "CPU Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "cpu_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"system_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"System Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "B",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "System Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "system_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"peripheral_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Peripheral Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "C",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Peripheral Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "peripheral_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"dimma2_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Dimm A2 Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "F",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "DIMMA2 Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "dimma2_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"dimmb2_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Dimm B2 Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "G",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "DIMMB2 Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "dimmb2_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vrmab_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Vrmab Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "H",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "VRMCPU Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vrmcpu_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vrmcpu_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Vrmcpu Temp\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "I",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "VRMAB Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vrmab_temp"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"fan1\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"rpm\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"FAN1\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "J",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "FAN3"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "fan3"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"fan2\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"rpm\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"FAN2\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "rawQuery": false,
          "refId": "K",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "FAN4"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "fan4"
            }
          ]
        }
      ],
      "title": "Server Status",
      "type": "stat"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "links": []
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 93,
      "legend": {
        "alignAsTable": true,
        "avg": false,
        "current": true,
        "hideEmpty": true,
        "hideZero": true,
        "max": true,
        "min": false,
        "rightSide": true,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "alertThreshold": true
      },
      "paceLength": 10,
      "percentage": false,
      "pluginVersion": "8.5.2",
      "pointradius": 5,
      "points": false,
      "renderer": "flot",
      "repeatDirection": "h",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"cpu_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"CPU\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "cpu_temp"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"system_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"System\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "dimma1_temp"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"dimma2_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"DIMM A2\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "dimma2_temp"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"dimmb2_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"DIMM B2\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "dimmb1_temp"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"peripheral_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Peripheral\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "E",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "dimmb2_temp"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vrmab_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Vrmab\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "F",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "mb_10g_temp"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vrmcpu_temp\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"degrees_c\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Vrmcpu\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "G",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "peripheral_temp"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Temperature in Celsius",
      "tooltip": {
        "shared": true,
        "sort": 2,
        "value_type": "individual"
      },
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {}
        }
      ],
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "$$hashKey": "object:5587",
          "decimals": 0,
          "format": "celsius",
          "label": "Temperature in Celsius (°C)",
          "logBase": 1,
          "show": true
        },
        {
          "$$hashKey": "object:5588",
          "format": "none",
          "logBase": 1,
          "show": false
        }
      ],
      "yaxis": {
        "align": false
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "links": []
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 7
      },
      "hiddenSeries": false,
      "id": 120,
      "legend": {
        "alignAsTable": true,
        "avg": false,
        "current": true,
        "hideEmpty": true,
        "hideZero": true,
        "max": true,
        "min": false,
        "rightSide": true,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "alertThreshold": true
      },
      "paceLength": 10,
      "percentage": false,
      "pluginVersion": "8.5.2",
      "pointradius": 5,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"12v\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"12V\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "12v"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"3.3vcc\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"3.3VCC\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "3.3vcc"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"5vcc\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"5VCC\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "E",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "5vcc"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vbat\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VBat\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "F",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vbat"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vdd_33_stby\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VDD 3.3 STBY\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "G",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vdd_core_run"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vdd_5_dual\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VDD 5 DUAL\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "H",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vdd_mem_ab_sus"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vdd_core_run\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VDD Core Run\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vdd_5_dual"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vdd_mem_ab_sus\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VDD Mem AB Sus\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vdd_33_stby"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vdd_soc_dual\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VDD Soc Dual\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "I",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vdd_soc_run"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ipmi_sensor\")\r\n  |> filter(fn: (r) => r[\"server\"] == \"${serveripmi}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"name\"] == \"vdd_soc_run\")\r\n  |> filter(fn: (r) => r[\"unit\"] == \"volts\")\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"VDD Soc Run\"}))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "J",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.2.12"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "vdd_soc_daul"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Internal System Voltages (V)",
      "tooltip": {
        "shared": true,
        "sort": 2,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "$$hashKey": "object:1795",
          "decimals": 0,
          "format": "volt",
          "label": "Voltage (V)",
          "logBase": 1,
          "show": true
        },
        {
          "$$hashKey": "object:1796",
          "format": "none",
          "logBase": 1,
          "show": false
        }
      ],
      "yaxis": {
        "align": false
      }
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "mvolt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 0,
        "y": 13
      },
      "id": 137,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "expr": "count(kasa_online==1)",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "instant": true,
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_voltage_mv\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_voltage_mv"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Voltage",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "mamp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 2,
        "y": 13
      },
      "id": 139,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "expr": "count(kasa_relay_state==1)",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "instant": true,
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_current_ma\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_current_ma"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Current Draw",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#299c46",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 50
              },
              {
                "color": "#d44a3a",
                "value": 100
              }
            ]
          },
          "unit": "mwatt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 4,
        "y": 13
      },
      "id": 141,
      "interval": "15s",
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "expr": "sum(kasa_power_load)",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "instant": false,
          "interval": "",
          "legendFormat": "",
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_power_mw\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_power_mw"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Power Current",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 6,
        "x": 6,
        "y": 13
      },
      "id": 143,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "expr": "",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "instant": false,
          "interval": "",
          "legendFormat": "",
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_total_wh\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_total_wh"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Total Power Current Year",
      "type": "stat"
    },
    {
      "aliasColors": {},
      "bars": true,
      "dashLength": 10,
      "dashes": false,
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "displayName": "Power usage in time",
          "links": [],
          "unit": "mwatt"
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 13
      },
      "hiddenSeries": false,
      "hideTimeOverride": false,
      "id": 145,
      "interval": "",
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": true,
        "max": false,
        "min": false,
        "rightSide": false,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": false,
      "linewidth": 1,
      "nullPointMode": "connected",
      "options": {
        "alertThreshold": true
      },
      "percentage": false,
      "pluginVersion": "8.5.2",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "alias": "Power",
          "expr": "sum_over_time(kasa_power_load[1h]) /240",
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "interval": "",
          "legendFormat": "{{alias}}",
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_power_mw\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_power_mw"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "Power"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Watts per hour",
      "tooltip": {
        "shared": true,
        "sort": 2,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "$$hashKey": "object:2288",
          "format": "mwatt",
          "logBase": 1,
          "show": true
        },
        {
          "$$hashKey": "object:2289",
          "format": "watt",
          "logBase": 1,
          "show": true
        }
      ],
      "yaxis": {
        "align": false
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "links": [],
          "unit": "mamp"
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 14,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "hiddenSeries": false,
      "id": 147,
      "legend": {
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "alertThreshold": true
      },
      "percentage": false,
      "pluginVersion": "8.5.2",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "Current",
          "expr": "sum(kasa_current)",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "interval": "",
          "legendFormat": "Total",
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_current_ma\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_current_ma"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "Current"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Current",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "$$hashKey": "object:261",
          "format": "mamp",
          "logBase": 1,
          "show": true
        },
        {
          "$$hashKey": "object:262",
          "format": "short",
          "logBase": 1,
          "show": true
        }
      ],
      "yaxis": {
        "align": false
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": {
        "type": "influxdb",
        "uid": "PC003803D09A91473"
      },
      "fieldConfig": {
        "defaults": {
          "unit": "mvolt"
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 8,
        "w": 11,
        "x": 12,
        "y": 22
      },
      "hiddenSeries": false,
      "id": 149,
      "interval": "",
      "legend": {
        "avg": true,
        "current": false,
        "max": true,
        "min": true,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "alertThreshold": true
      },
      "percentage": false,
      "pluginVersion": "8.5.2",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "Voltage",
          "expr": "increase(kasa_power_total[24h])",
          "format": "table",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "instant": true,
          "interval": "",
          "legendFormat": "{{alias}}",
          "measurement": "serverPower_smartplug",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"anarion\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"serverPower_smartplug\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"emeter_get_realtime_voltage_mv\")\r\n  |> filter(fn: (r) => r[\"host\"] == \"anarion-nas\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "emeter_get_realtime_voltage_mv"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "Voltage"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Voltage in time",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "$$hashKey": "object:510",
          "format": "mvolt",
          "logBase": 1,
          "show": true
        },
        {
          "$$hashKey": "object:511",
          "format": "short",
          "logBase": 1,
          "show": true
        }
      ],
      "yaxis": {
        "align": false
      }
    },
    {
      "collapsed": false,
      "datasource": {
        "type": "influxdb",
        "uid": "aT8eChcMk"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 30
      },
      "id": 122,
      "panels": [],
      "title": "HPE iLO v2.0",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "aT8eChcMk"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#299c46",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 70
              },
              {
                "color": "#d44a3a",
                "value": 85
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 31
      },
      "id": 123,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "background",
        "fieldOptions": {
          "calcs": [
            "mean"
          ]
        },
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Inlet Ambient"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "01-inlet_ambient"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "B",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "CPU Temperature"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "02-cpu"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "C",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "P1 DIMM 1-2"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "03-p1_dimm_1-2"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "D",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Chipset"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "05-chipset"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "E",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Chipset Zone"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "06-chipset_zone"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "F",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "iLO Zone"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "09-ilo_zone"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "G",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "VR P1 Zone"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "07-vr_p1_zone"
            }
          ]
        },
        {
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "H",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Sys Exhaust"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=",
              "value": "192.168.1.60"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "12-sys_exhaust"
            }
          ]
        }
      ],
      "title": "Server Status",
      "type": "stat"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": {
        "type": "influxdb",
        "uid": "aT8eChcMk"
      },
      "fieldConfig": {
        "defaults": {
          "links": []
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 31
      },
      "hiddenSeries": false,
      "id": 132,
      "legend": {
        "alignAsTable": true,
        "avg": false,
        "current": true,
        "hideEmpty": true,
        "hideZero": true,
        "max": true,
        "min": false,
        "rightSide": true,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 2,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "alertThreshold": true
      },
      "paceLength": 10,
      "percentage": false,
      "pluginVersion": "8.5.2",
      "pointradius": 5,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "G",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "01-inlet_ambient"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "02-cpu"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "03-p1_dimm_1-2"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "05-chipset"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "06-chipset_zone"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "E",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "07-vr_p1_zone"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "F",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "09-ilo_zone"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "H",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "11-pci_1_zone"
            }
          ]
        },
        {
          "alias": "$tag_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "name"
              ],
              "type": "tag"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ipmi_sensor",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "I",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "server",
              "operator": "=~",
              "value": "/^$serveripmi$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=",
              "value": "12-sys_exhaust"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Temperature in Celsius",
      "tooltip": {
        "shared": true,
        "sort": 2,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": 0,
          "format": "celsius",
          "label": "Temperature in Celsius (°C)",
          "logBase": 1,
          "show": true
        },
        {
          "format": "none",
          "logBase": 1,
          "show": false
        }
      ],
      "yaxis": {
        "align": false
      }
    }
  ],
  "refresh": "5m",
  "schemaVersion": 36,
  "style": "dark",
  "tags": [
    "IPMI",
    "Proxmox"
  ],
  "templating": {
    "list": [
      {
        "auto": true,
        "auto_count": 100,
        "auto_min": "30s",
        "current": {
          "selected": false,
          "text": "auto",
          "value": "$__auto_interval_inter"
        },
        "hide": 0,
        "label": "Sampling",
        "name": "inter",
        "options": [
          {
            "selected": true,
            "text": "auto",
            "value": "$__auto_interval_inter"
          },
          {
            "selected": false,
            "text": "1m",
            "value": "1m"
          },
          {
            "selected": false,
            "text": "10m",
            "value": "10m"
          },
          {
            "selected": false,
            "text": "30m",
            "value": "30m"
          },
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": false,
            "text": "6h",
            "value": "6h"
          },
          {
            "selected": false,
            "text": "12h",
            "value": "12h"
          },
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          },
          {
            "selected": false,
            "text": "7d",
            "value": "7d"
          },
          {
            "selected": false,
            "text": "14d",
            "value": "14d"
          },
          {
            "selected": false,
            "text": "30d",
            "value": "30d"
          }
        ],
        "query": "1m,10m,30m,1h,6h,12h,1d,7d,14d,30d",
        "queryValue": "",
        "refresh": 2,
        "skipUrlSync": false,
        "type": "interval"
      },
      {
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "influxdb",
          "uid": "PC003803D09A91473"
        },
        "definition": "import \"influxdata/influxdb/schema\"\r\n\r\nschema.tagValues(\r\n  bucket: \"anarion\",\r\n  tag: \"server\"\r\n)",
        "hide": 0,
        "includeAll": true,
        "label": "Server IPMI",
        "multi": true,
        "name": "serveripmi",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\r\n\r\nschema.tagValues(\r\n  bucket: \"anarion\",\r\n  tag: \"server\"\r\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-12h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Proxmox pve2  - Hosts IPMI",
  "uid": "qsry05emz",
  "version": 30,
  "weekStart": ""
}